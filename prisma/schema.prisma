generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  role            UserRole         @default(WAITING)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  supportRequests SupportRequest[]
  eventsCreated   Event[]          @relation("EventCreator")
  eventRegistrations EventRegistration[]
}

model Staff {
  id           String   @id @default(cuid())
  name         String
  position     String?
  description  String?
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rank         String?
  links        String?
  vrchatAvatar String?
  bannerId     String?
  imageId      String?
  banner       Image?   @relation("StaffBanner", fields: [bannerId], references: [id])
  image        Image?   @relation("StaffImage", fields: [imageId], references: [id])
  assignedEvents Event[] @relation("EventStaff")
}

model Event {
  id            String              @id @default(cuid())
  title         String
  description   String
  date          DateTime
  time          String
  location      String
  type          EventType           @default(REGULAR)
  capacity      Int
  price         Float?              @default(0)
  features      String[]            @default([])
  status        EventStatus         @default(DRAFT)
  published     Boolean             @default(false)
  publishedAt   DateTime?
  imageId       String?
  createdById   String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  // Relations
  createdBy     User                @relation("EventCreator", fields: [createdById], references: [id])
  image         Image?              @relation("EventImage", fields: [imageId], references: [id])
  staff         Staff[]             @relation("EventStaff")
  registrations EventRegistration[]
}

model EventRegistration {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  createdAt DateTime @default(now())
  
  // Relations
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, userId])
}

model Image {
  id           String   @id @default(cuid())
  data         Bytes
  mimetype     String
  filename     String?
  createdAt    DateTime @default(now())
  staffBanners Staff[]  @relation("StaffBanner")
  staffImages  Staff[]  @relation("StaffImage")
  events       Event[]  @relation("EventImage")
}

model SupportRequest {
  id         String          @id @default(cuid())
  name       String
  email      String
  subject    String
  message    String
  type       String
  userId     String?
  userRole   UserRole        @default(AUTHENTICATED)
  priority   SupportPriority @default(NORMAL)
  status     SupportStatus   @default(OPEN)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  resolvedAt DateTime?
  assignedTo String?
  response   String?
  user       User?           @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  WAITING
  AUTHENTICATED
  REJECTED
  USER
  VIP
  ADMIN
}

enum EventType {
  REGULAR
  PREMIUM
  ELITE
  EXCLUSIVE
}

enum EventStatus {
  DRAFT
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum SupportPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}
