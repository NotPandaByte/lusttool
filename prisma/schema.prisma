generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  role          UserRole  @default(WAITING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Staff {
  id           String   @id @default(cuid())
  name         String
  position     String?
  description  String?
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rank         String?
  links        String?
  vrchatAvatar String?
  bannerId     String?
  imageId      String?
  banner       Image?   @relation("StaffBanner", fields: [bannerId], references: [id])
  image        Image?   @relation("StaffImage", fields: [imageId], references: [id])
}

model Image {
  id           String   @id @default(cuid())
  data         Bytes
  mimetype     String
  filename     String?
  createdAt    DateTime @default(now())
  staffBanners Staff[]  @relation("StaffBanner")
  staffImages  Staff[]  @relation("StaffImage")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  WAITING
  AUTHENTICATED
  REJECTED
}
